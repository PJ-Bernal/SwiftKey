{
  "javascript": [
    {
      "basic": {
        "DataTypes": [
          "JavaScript's primitive data types form the foundation of the language's type system. There are seven primitive types: string (for text data like 'hello world'), number (for numeric values such as 42), boolean (for true/false values), null (representing intentional absence of value), undefined (for uninitialized values), symbol (for unique identifiers), and bigint (for large integers). These types are immutable and stored by value, meaning they can't be altered once created â€“ any operation on a primitive creates a new value. For example, when declaring let str = 'hello world', const num = 42, or let bool = true, each variable holds its own independent copy of the value. Primitive types can be checked using the typeof operator, which returns a string indicating the type, such as 'string' for strings or 'number' for numeric values.",

          "Objects are reference types that store collections of key-value pairs. When you assign an object to a new variable, you're creating a reference to the same object, not copying it. const user = { name: 'John', age: 30 };  const userRef = user; userRef.age = 31; // Changes both userRef and user console.log(user.age); // 31 const deepCopy = JSON.parse(JSON.stringify(user));",

          "Arrays are special objects optimized for ordered data. They come with built-in methods for data manipulation and can store mixed types. const mixed = [1, 'two', { three: 3 }, [4, 5]]; const numbers = Array.from({ length: 5 }, (_, i) => i + 1); const filtered = numbers.filter(n => n % 2 === 0); const mapped = numbers.map(n => n * 2);"
        ],
        "TemplateStrings": [
          "Template literals enable multiline strings and expressions that are evaluated and become part of the string. They provide cleaner string interpolation and maintain formatting. const user = 'John'; const greeting = `Hello ${user}!`; const sum = `The sum of 2 + 2 is ${2 + 2}`; const multiline = `\n  First line\n  Second line\n`;",

          "Template literals are especially useful for creating HTML templates with dynamic content. const className = 'highlight'; const content = 'Dynamic Content'; const html = `<div class='${className}'>${content}</div>`; const list = `<ul>${['a','b','c'].map(item => `<li>${item}</li>`).join('')}</ul>`;",

          "Template literals can be used with tagged functions for custom string processing. function myTag(strings, ...values) { return strings[0] + values.join('') } const tagged = myTag`Hello ${user}!`; const price = myTag`The total is: $${59.99}`; const nested = `Outer ${`Inner ${user}`}`"
        ],
        "TypeConversion": [
          "Converting strings to numbers has multiple approaches, each with specific use cases. parseInt and parseFloat are commonly used for explicit conversion. const strNum = parseInt('42', 10); const floatNum = parseFloat('42.5'); const converted = Number('123'); const unaryPlus = +'42';",

          "The Number constructor and parseFloat handle decimal numbers differently, which is important for precise calculations. console.log(parseFloat('12.00')); console.log(Number('12.345').toFixed(2)); console.log(parseInt('12.99', 10)); console.log(+'12.88');",

          "Converting numbers to strings can be done with different methods depending on the desired format. const num = 42; const str1 = String(num); const str2 = num.toString(); const str3 = num.toFixed(2); const str4 = `${num}`;"
        ]
      },
      "nextTopic": {
        "AnotherData": "test"
      }
    }
  ]
}
